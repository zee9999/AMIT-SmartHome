
Interfacing_Modules_AMIT_F20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000008c4  00000958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800072  00800072  0000096a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031ef  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eae  00000000  00000000  00003e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b3f  00000000  00000000  00004d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000744  00000000  00000000  0000687c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010c0  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000284c  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  8a:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_State+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_State+0x7a>
 17c:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_State+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_State+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_State+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_State+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_State+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_State+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_State+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_State+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_State+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_State+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_State+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_State+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_State+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_State+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_State+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_State+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_State+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_State+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_State+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_State+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_State+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_State+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_State+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_State+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <HC_05_Init>:
void HC_05_Init(void)
{
	/*Baud rate value variable*/
	uint16_t UBRR_Val = 0;
	/*Enable Transmitter and Receiver bits*/
	UCSRB = (1 << RXEN) | (1 << TXEN);
 256:	88 e1       	ldi	r24, 0x18	; 24
 258:	8a b9       	out	0x0a, r24	; 10
	/*Full configuration for UART*/
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 25a:	86 e8       	ldi	r24, 0x86	; 134
 25c:	80 bd       	out	0x20, r24	; 32
	/*Baud Rate Calculations*/
	UBRR_Val = (((FRQ) / (16 * BAUDRATE)) - 1);//11110101 00111001
	UBRRL = UBRR_Val;     //00000000 00111001
 25e:	87 e6       	ldi	r24, 0x67	; 103
 260:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Val >> 8;//00000000 11110101
 262:	10 bc       	out	0x20, r1	; 32
 264:	08 95       	ret

00000266 <HC_05_Recieve>:
}
uint8_t HC_05_Recieve(void)
{
	while(!(UCSRA & (1<<RXC)));
 266:	5f 9b       	sbis	0x0b, 7	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <HC_05_Recieve>
	return UDR;
 26a:	8c b1       	in	r24, 0x0c	; 12
}
 26c:	08 95       	ret

0000026e <LCD_WRITE_CMD>:
	}
}
void LCD_WRITE_CHR(uint32_t numbr)
{
	//uint8_t num[10];
	LCD_WRITE_DTA(numbr);
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 290:	8b b3       	in	r24, 0x1b	; 27
 292:	9c 2f       	mov	r25, r28
 294:	90 7f       	andi	r25, 0xF0	; 240
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	89 2b       	or	r24, r25
 29a:	8b bb       	out	0x1b, r24	; 27
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2a6:	8f e9       	ldi	r24, 0x9F	; 159
 2a8:	9f e0       	ldi	r25, 0x0F	; 15
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_WRITE_CMD+0x3c>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_WRITE_CMD+0x42>
 2b0:	00 00       	nop
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	63 e0       	ldi	r22, 0x03	; 3
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	30 e1       	ldi	r19, 0x10	; 16
 2c0:	c3 9f       	mul	r28, r19
 2c2:	c0 01       	movw	r24, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	92 2f       	mov	r25, r18
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	89 2b       	or	r24, r25
 2cc:	8b bb       	out	0x1b, r24	; 27
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	63 e0       	ldi	r22, 0x03	; 3
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2d8:	8f e9       	ldi	r24, 0x9F	; 159
 2da:	9f e0       	ldi	r25, 0x0F	; 15
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_WRITE_CMD+0x6e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_WRITE_CMD+0x74>
 2e2:	00 00       	nop
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	9f e1       	ldi	r25, 0x1F	; 31
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_WRITE_CMD+0x84>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_WRITE_CMD+0x8a>
 2f8:	00 00       	nop
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <LCD_Init>:
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	65 e0       	ldi	r22, 0x05	; 5
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	66 e0       	ldi	r22, 0x06	; 6
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	67 e0       	ldi	r22, 0x07	; 7
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	83 ed       	ldi	r24, 0xD3	; 211
 348:	90 e3       	ldi	r25, 0x30	; 48
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <LCD_Init+0x4c>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_Init+0x56>
 354:	00 00       	nop
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 35c:	83 e3       	ldi	r24, 0x33	; 51
 35e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 362:	82 e3       	ldi	r24, 0x32	; 50
 364:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 36e:	8c e0       	ldi	r24, 0x0C	; 12
 370:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 380:	08 95       	ret

00000382 <LCD_WRITE_DTA>:
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	9c 2f       	mov	r25, r28
 3a8:	90 7f       	andi	r25, 0xF0	; 240
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	89 2b       	or	r24, r25
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3ba:	8f e9       	ldi	r24, 0x9F	; 159
 3bc:	9f e0       	ldi	r25, 0x0F	; 15
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_WRITE_DTA+0x3c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_WRITE_DTA+0x42>
 3c4:	00 00       	nop
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3d0:	2b b3       	in	r18, 0x1b	; 27
 3d2:	30 e1       	ldi	r19, 0x10	; 16
 3d4:	c3 9f       	mul	r28, r19
 3d6:	c0 01       	movw	r24, r0
 3d8:	11 24       	eor	r1, r1
 3da:	92 2f       	mov	r25, r18
 3dc:	9f 70       	andi	r25, 0x0F	; 15
 3de:	89 2b       	or	r24, r25
 3e0:	8b bb       	out	0x1b, r24	; 27
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 3ec:	8f e9       	ldi	r24, 0x9F	; 159
 3ee:	9f e0       	ldi	r25, 0x0F	; 15
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_WRITE_DTA+0x6e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_WRITE_DTA+0x74>
 3f6:	00 00       	nop
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_State>
 402:	8f e3       	ldi	r24, 0x3F	; 63
 404:	9f e1       	ldi	r25, 0x1F	; 31
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_WRITE_STR>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
 418:	88 81       	ld	r24, Y
 41a:	88 23       	and	r24, r24
 41c:	31 f0       	breq	.+12     	; 0x42a <LCD_WRITE_STR+0x18>
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WRITE_DTA>
 424:	89 91       	ld	r24, Y+
 426:	81 11       	cpse	r24, r1
 428:	fb cf       	rjmp	.-10     	; 0x420 <LCD_WRITE_STR+0xe>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LCD_CLEAR>:
	//ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	//LCD_WRITE_STR(num);
}
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_CMD>
 436:	08 95       	ret

00000438 <vListInsertEnd>:
    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	9c 01       	movw	r18, r24
 43e:	fb 01       	movw	r30, r22
 440:	dc 01       	movw	r26, r24
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	cd 91       	ld	r28, X+
 446:	dc 91       	ld	r29, X
 448:	12 97       	sbiw	r26, 0x02	; 2
 44a:	d3 83       	std	Z+3, r29	; 0x03
 44c:	c2 83       	std	Z+2, r28	; 0x02
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	9d 81       	ldd	r25, Y+5	; 0x05
 452:	95 83       	std	Z+5, r25	; 0x05
 454:	84 83       	std	Z+4, r24	; 0x04
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	9d 81       	ldd	r25, Y+5	; 0x05
 45a:	dc 01       	movw	r26, r24
 45c:	13 96       	adiw	r26, 0x03	; 3
 45e:	7c 93       	st	X, r23
 460:	6e 93       	st	-X, r22
 462:	12 97       	sbiw	r26, 0x02	; 2
 464:	7d 83       	std	Y+5, r23	; 0x05
 466:	6c 83       	std	Y+4, r22	; 0x04
 468:	31 87       	std	Z+9, r19	; 0x09
 46a:	20 87       	std	Z+8, r18	; 0x08
 46c:	f9 01       	movw	r30, r18
 46e:	80 81       	ld	r24, Z
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 83       	st	Z, r24
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 480:	a0 85       	ldd	r26, Z+8	; 0x08
 482:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 484:	c2 81       	ldd	r28, Z+2	; 0x02
 486:	d3 81       	ldd	r29, Z+3	; 0x03
 488:	84 81       	ldd	r24, Z+4	; 0x04
 48a:	95 81       	ldd	r25, Z+5	; 0x05
 48c:	9d 83       	std	Y+5, r25	; 0x05
 48e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 490:	c4 81       	ldd	r28, Z+4	; 0x04
 492:	d5 81       	ldd	r29, Z+5	; 0x05
 494:	82 81       	ldd	r24, Z+2	; 0x02
 496:	93 81       	ldd	r25, Z+3	; 0x03
 498:	9b 83       	std	Y+3, r25	; 0x03
 49a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 49c:	11 96       	adiw	r26, 0x01	; 1
 49e:	8d 91       	ld	r24, X+
 4a0:	9c 91       	ld	r25, X
 4a2:	12 97       	sbiw	r26, 0x02	; 2
 4a4:	e8 17       	cp	r30, r24
 4a6:	f9 07       	cpc	r31, r25
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 4aa:	84 81       	ldd	r24, Z+4	; 0x04
 4ac:	95 81       	ldd	r25, Z+5	; 0x05
 4ae:	12 96       	adiw	r26, 0x02	; 2
 4b0:	9c 93       	st	X, r25
 4b2:	8e 93       	st	-X, r24
 4b4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 4b6:	11 86       	std	Z+9, r1	; 0x09
 4b8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 4ba:	8c 91       	ld	r24, X
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 4c0:	8c 91       	ld	r24, X
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <main>:



int main(void)
{
	LCD_Init();
 4c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LCD_Init>
	LCD_CLEAR();
 4cc:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
	HC_05_Init();
 4d0:	0e 94 2b 01 	call	0x256	; 0x256 <HC_05_Init>
	uint8_t* data;
	Master_Init();
 4d4:	0e 94 13 03 	call	0x626	; 0x626 <Master_Init>


	while(1)
	{
		data = HC_05_Recieve();
 4d8:	0e 94 33 01 	call	0x266	; 0x266 <HC_05_Recieve>
		{
			Master_Trans(0);
			LCD_CLEAR();
			LCD_WRITE_STR("DATA TRANSMITTED");
		}*/
		switch ((uint8_t) data)
 4dc:	82 33       	cpi	r24, 0x32	; 50
 4de:	a9 f0       	breq	.+42     	; 0x50a <main+0x42>
 4e0:	28 f4       	brcc	.+10     	; 0x4ec <main+0x24>
 4e2:	80 33       	cpi	r24, 0x30	; 48
 4e4:	81 f1       	breq	.+96     	; 0x546 <main+0x7e>
 4e6:	81 33       	cpi	r24, 0x31	; 49
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <main+0x2e>
 4ea:	37 c0       	rjmp	.+110    	; 0x55a <main+0x92>
 4ec:	83 33       	cpi	r24, 0x33	; 51
 4ee:	b9 f0       	breq	.+46     	; 0x51e <main+0x56>
 4f0:	84 33       	cpi	r24, 0x34	; 52
 4f2:	f9 f0       	breq	.+62     	; 0x532 <main+0x6a>
 4f4:	32 c0       	rjmp	.+100    	; 0x55a <main+0x92>
		{
			case 49:
				Master_Trans(1);
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 1a 03 	call	0x634	; 0x634 <Master_Trans>
				LCD_CLEAR();
 4fc:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 500:	80 e6       	ldi	r24, 0x60	; 96
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 508:	e7 cf       	rjmp	.-50     	; 0x4d8 <main+0x10>
			case 50:
				Master_Trans(2);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 1a 03 	call	0x634	; 0x634 <Master_Trans>
				LCD_CLEAR();
 510:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 514:	80 e6       	ldi	r24, 0x60	; 96
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 51c:	dd cf       	rjmp	.-70     	; 0x4d8 <main+0x10>
			case 51:
				Master_Trans(3);
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 1a 03 	call	0x634	; 0x634 <Master_Trans>
				LCD_CLEAR();
 524:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 528:	80 e6       	ldi	r24, 0x60	; 96
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 530:	d3 cf       	rjmp	.-90     	; 0x4d8 <main+0x10>
			case 52:
				Master_Trans(4);
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	0e 94 1a 03 	call	0x634	; 0x634 <Master_Trans>
				LCD_CLEAR();
 538:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 53c:	80 e6       	ldi	r24, 0x60	; 96
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 544:	c9 cf       	rjmp	.-110    	; 0x4d8 <main+0x10>
			case 48:
				Master_Trans(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 1a 03 	call	0x634	; 0x634 <Master_Trans>
				LCD_CLEAR();
 54c:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 550:	80 e6       	ldi	r24, 0x60	; 96
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 558:	bf cf       	rjmp	.-130    	; 0x4d8 <main+0x10>
			default:
				LCD_CLEAR();
 55a:	0e 94 18 02 	call	0x430	; 0x430 <LCD_CLEAR>
				LCD_WRITE_STR("DATA TRANSMITTED");
 55e:	80 e6       	ldi	r24, 0x60	; 96
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 09 02 	call	0x412	; 0x412 <LCD_WRITE_STR>
				break;
 566:	b8 cf       	rjmp	.-144    	; 0x4d8 <main+0x10>

00000568 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	0f 92       	push	r0
 570:	1f 92       	push	r1
 572:	11 24       	eor	r1, r1
 574:	2f 92       	push	r2
 576:	3f 92       	push	r3
 578:	4f 92       	push	r4
 57a:	5f 92       	push	r5
 57c:	6f 92       	push	r6
 57e:	7f 92       	push	r7
 580:	8f 92       	push	r8
 582:	9f 92       	push	r9
 584:	af 92       	push	r10
 586:	bf 92       	push	r11
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
 5b0:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <pxCurrentTCB>
 5b4:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <pxCurrentTCB+0x1>
 5b8:	0d b6       	in	r0, 0x3d	; 61
 5ba:	0d 92       	st	X+, r0
 5bc:	0e b6       	in	r0, 0x3e	; 62
 5be:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 5c0:	0e 94 3b 03 	call	0x676	; 0x676 <xTaskIncrementTick>
 5c4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 5c6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 5ca:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <pxCurrentTCB>
 5ce:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <pxCurrentTCB+0x1>
 5d2:	cd 91       	ld	r28, X+
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	dd 91       	ld	r29, X+
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	5f 90       	pop	r5
 610:	4f 90       	pop	r4
 612:	3f 90       	pop	r3
 614:	2f 90       	pop	r2
 616:	1f 90       	pop	r1
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 61e:	08 95       	ret

00000620 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 620:	0e 94 b4 02 	call	0x568	; 0x568 <vPortYieldFromTick>
		asm volatile ( "reti" );
 624:	18 95       	reti

00000626 <Master_Init>:
 */ 
#include "SPI.h"

void Master_Init(void)
{
	SET_BIT(DDRB,4);
 626:	bc 9a       	sbi	0x17, 4	; 23
	SET_BIT(DDRB,5);
 628:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(DDRB,6);
 62a:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(DDRB,7);
 62c:	bf 9a       	sbi	0x17, 7	; 23
	SPCR = 0x53;
 62e:	83 e5       	ldi	r24, 0x53	; 83
 630:	8d b9       	out	0x0d, r24	; 13
 632:	08 95       	ret

00000634 <Master_Trans>:
	SET_BIT(SPCR,SPR0);
	*/
}
void Master_Trans(uint8_t data)
{
	CLR_BIT(PORTB,4);
 634:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data;
 636:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR,SPIF) != 1);
 638:	77 9b       	sbis	0x0e, 7	; 14
 63a:	fe cf       	rjmp	.-4      	; 0x638 <Master_Trans+0x4>
}
 63c:	08 95       	ret

0000063e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 63e:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 642:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 646:	80 81       	ld	r24, Z
 648:	81 11       	cpse	r24, r1
 64a:	07 c0       	rjmp	.+14     	; 0x65a <prvResetNextTaskUnblockTime+0x1c>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <xNextTaskUnblockTime+0x1>
 654:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <xNextTaskUnblockTime>
 658:	08 95       	ret
 65a:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 65e:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 662:	05 80       	ldd	r0, Z+5	; 0x05
 664:	f6 81       	ldd	r31, Z+6	; 0x06
 666:	e0 2d       	mov	r30, r0
 668:	80 81       	ld	r24, Z
 66a:	91 81       	ldd	r25, Z+1	; 0x01
 66c:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <xNextTaskUnblockTime+0x1>
 670:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <xNextTaskUnblockTime>
 674:	08 95       	ret

00000676 <xTaskIncrementTick>:
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 68a:	81 11       	cpse	r24, r1
 68c:	9f c0       	rjmp	.+318    	; 0x7cc <xTaskIncrementTick+0x156>
 68e:	e0 90 7a 00 	lds	r14, 0x007A	; 0x80007a <xTickCount>
 692:	f0 90 7b 00 	lds	r15, 0x007B	; 0x80007b <xTickCount+0x1>
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	e8 1a       	sub	r14, r24
 69a:	f8 0a       	sbc	r15, r24
 69c:	f0 92 7b 00 	sts	0x007B, r15	; 0x80007b <xTickCount+0x1>
 6a0:	e0 92 7a 00 	sts	0x007A, r14	; 0x80007a <xTickCount>
 6a4:	e1 14       	cp	r14, r1
 6a6:	f1 04       	cpc	r15, r1
 6a8:	b9 f4       	brne	.+46     	; 0x6d8 <xTaskIncrementTick+0x62>
 6aa:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <pxDelayedTaskList>
 6ae:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 6b2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <pxOverflowDelayedTaskList>
 6b6:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <pxOverflowDelayedTaskList+0x1>
 6ba:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <pxDelayedTaskList+0x1>
 6be:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <pxDelayedTaskList>
 6c2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <pxOverflowDelayedTaskList+0x1>
 6c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <pxOverflowDelayedTaskList>
 6ca:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <xNumOfOverflows>
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <xNumOfOverflows>
 6d4:	0e 94 1f 03 	call	0x63e	; 0x63e <prvResetNextTaskUnblockTime>
 6d8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <xNextTaskUnblockTime>
 6dc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <xNextTaskUnblockTime+0x1>
 6e0:	e8 16       	cp	r14, r24
 6e2:	f9 06       	cpc	r15, r25
 6e4:	10 f4       	brcc	.+4      	; 0x6ea <xTaskIncrementTick+0x74>
 6e6:	d1 2c       	mov	r13, r1
 6e8:	53 c0       	rjmp	.+166    	; 0x790 <xTaskIncrementTick+0x11a>
 6ea:	d1 2c       	mov	r13, r1
 6ec:	cc 24       	eor	r12, r12
 6ee:	c3 94       	inc	r12
 6f0:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 6f4:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 6f8:	80 81       	ld	r24, Z
 6fa:	81 11       	cpse	r24, r1
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <xTaskIncrementTick+0x96>
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <xNextTaskUnblockTime+0x1>
 706:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <xNextTaskUnblockTime>
 70a:	42 c0       	rjmp	.+132    	; 0x790 <xTaskIncrementTick+0x11a>
 70c:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pxDelayedTaskList>
 710:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pxDelayedTaskList+0x1>
 714:	05 80       	ldd	r0, Z+5	; 0x05
 716:	f6 81       	ldd	r31, Z+6	; 0x06
 718:	e0 2d       	mov	r30, r0
 71a:	c6 81       	ldd	r28, Z+6	; 0x06
 71c:	d7 81       	ldd	r29, Z+7	; 0x07
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	e8 16       	cp	r14, r24
 724:	f9 06       	cpc	r15, r25
 726:	28 f4       	brcc	.+10     	; 0x732 <xTaskIncrementTick+0xbc>
 728:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <xNextTaskUnblockTime+0x1>
 72c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <xNextTaskUnblockTime>
 730:	2f c0       	rjmp	.+94     	; 0x790 <xTaskIncrementTick+0x11a>
 732:	8e 01       	movw	r16, r28
 734:	0e 5f       	subi	r16, 0xFE	; 254
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	c8 01       	movw	r24, r16
 73a:	0e 94 3d 02 	call	0x47a	; 0x47a <uxListRemove>
 73e:	8c 89       	ldd	r24, Y+20	; 0x14
 740:	9d 89       	ldd	r25, Y+21	; 0x15
 742:	89 2b       	or	r24, r25
 744:	21 f0       	breq	.+8      	; 0x74e <xTaskIncrementTick+0xd8>
 746:	ce 01       	movw	r24, r28
 748:	0c 96       	adiw	r24, 0x0c	; 12
 74a:	0e 94 3d 02 	call	0x47a	; 0x47a <uxListRemove>
 74e:	8e 89       	ldd	r24, Y+22	; 0x16
 750:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <uxTopReadyPriority>
 754:	98 17       	cp	r25, r24
 756:	10 f4       	brcc	.+4      	; 0x75c <xTaskIncrementTick+0xe6>
 758:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <uxTopReadyPriority>
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	9c 01       	movw	r18, r24
 760:	22 0f       	add	r18, r18
 762:	33 1f       	adc	r19, r19
 764:	22 0f       	add	r18, r18
 766:	33 1f       	adc	r19, r19
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	82 0f       	add	r24, r18
 76e:	93 1f       	adc	r25, r19
 770:	b8 01       	movw	r22, r16
 772:	80 58       	subi	r24, 0x80	; 128
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	0e 94 1c 02 	call	0x438	; 0x438 <vListInsertEnd>
 77a:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <pxCurrentTCB>
 77e:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <pxCurrentTCB+0x1>
 782:	9e 89       	ldd	r25, Y+22	; 0x16
 784:	86 89       	ldd	r24, Z+22	; 0x16
 786:	98 17       	cp	r25, r24
 788:	08 f4       	brcc	.+2      	; 0x78c <xTaskIncrementTick+0x116>
 78a:	b2 cf       	rjmp	.-156    	; 0x6f0 <xTaskIncrementTick+0x7a>
 78c:	dc 2c       	mov	r13, r12
 78e:	b0 cf       	rjmp	.-160    	; 0x6f0 <xTaskIncrementTick+0x7a>
 790:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <pxCurrentTCB>
 794:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <pxCurrentTCB+0x1>
 798:	86 89       	ldd	r24, Z+22	; 0x16
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	fc 01       	movw	r30, r24
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	8e 0f       	add	r24, r30
 7ac:	9f 1f       	adc	r25, r31
 7ae:	fc 01       	movw	r30, r24
 7b0:	e0 58       	subi	r30, 0x80	; 128
 7b2:	ff 4f       	sbci	r31, 0xFF	; 255
 7b4:	80 81       	ld	r24, Z
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	10 f0       	brcs	.+4      	; 0x7be <xTaskIncrementTick+0x148>
 7ba:	dd 24       	eor	r13, r13
 7bc:	d3 94       	inc	r13
 7be:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <xYieldPending>
 7c2:	88 23       	and	r24, r24
 7c4:	69 f0       	breq	.+26     	; 0x7e0 <xTaskIncrementTick+0x16a>
 7c6:	dd 24       	eor	r13, r13
 7c8:	d3 94       	inc	r13
 7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <xTaskIncrementTick+0x16a>
 7cc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <xPendedTicks>
 7d0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <xPendedTicks+0x1>
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <xPendedTicks+0x1>
 7da:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <xPendedTicks>
 7de:	d1 2c       	mov	r13, r1
 7e0:	8d 2d       	mov	r24, r13
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	ff 90       	pop	r15
 7ec:	ef 90       	pop	r14
 7ee:	df 90       	pop	r13
 7f0:	cf 90       	pop	r12
 7f2:	08 95       	ret

000007f4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 7f4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 7f8:	88 23       	and	r24, r24
 7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <xYieldPending>
 802:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 804:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 808:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <uxTopReadyPriority>
 80c:	82 2f       	mov	r24, r18
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	fc 01       	movw	r30, r24
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	ee 0f       	add	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	e8 0f       	add	r30, r24
 820:	f9 1f       	adc	r31, r25
 822:	e0 58       	subi	r30, 0x80	; 128
 824:	ff 4f       	sbci	r31, 0xFF	; 255
 826:	30 81       	ld	r19, Z
 828:	31 11       	cpse	r19, r1
 82a:	11 c0       	rjmp	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 82c:	21 50       	subi	r18, 0x01	; 1
 82e:	82 2f       	mov	r24, r18
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	fc 01       	movw	r30, r24
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	ee 0f       	add	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	ee 0f       	add	r30, r30
 83e:	ff 1f       	adc	r31, r31
 840:	e8 0f       	add	r30, r24
 842:	f9 1f       	adc	r31, r25
 844:	e0 58       	subi	r30, 0x80	; 128
 846:	ff 4f       	sbci	r31, 0xFF	; 255
 848:	30 81       	ld	r19, Z
 84a:	33 23       	and	r19, r19
 84c:	79 f3       	breq	.-34     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 84e:	ac 01       	movw	r20, r24
 850:	44 0f       	add	r20, r20
 852:	55 1f       	adc	r21, r21
 854:	44 0f       	add	r20, r20
 856:	55 1f       	adc	r21, r21
 858:	44 0f       	add	r20, r20
 85a:	55 1f       	adc	r21, r21
 85c:	48 0f       	add	r20, r24
 85e:	59 1f       	adc	r21, r25
 860:	da 01       	movw	r26, r20
 862:	a0 58       	subi	r26, 0x80	; 128
 864:	bf 4f       	sbci	r27, 0xFF	; 255
 866:	11 96       	adiw	r26, 0x01	; 1
 868:	ed 91       	ld	r30, X+
 86a:	fc 91       	ld	r31, X
 86c:	12 97       	sbiw	r26, 0x02	; 2
 86e:	02 80       	ldd	r0, Z+2	; 0x02
 870:	f3 81       	ldd	r31, Z+3	; 0x03
 872:	e0 2d       	mov	r30, r0
 874:	12 96       	adiw	r26, 0x02	; 2
 876:	fc 93       	st	X, r31
 878:	ee 93       	st	-X, r30
 87a:	11 97       	sbiw	r26, 0x01	; 1
 87c:	4d 57       	subi	r20, 0x7D	; 125
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	e4 17       	cp	r30, r20
 882:	f5 07       	cpc	r31, r21
 884:	29 f4       	brne	.+10     	; 0x890 <__stack+0x31>
 886:	42 81       	ldd	r20, Z+2	; 0x02
 888:	53 81       	ldd	r21, Z+3	; 0x03
 88a:	fd 01       	movw	r30, r26
 88c:	52 83       	std	Z+2, r21	; 0x02
 88e:	41 83       	std	Z+1, r20	; 0x01
 890:	fc 01       	movw	r30, r24
 892:	ee 0f       	add	r30, r30
 894:	ff 1f       	adc	r31, r31
 896:	ee 0f       	add	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	8e 0f       	add	r24, r30
 8a0:	9f 1f       	adc	r25, r31
 8a2:	fc 01       	movw	r30, r24
 8a4:	e0 58       	subi	r30, 0x80	; 128
 8a6:	ff 4f       	sbci	r31, 0xFF	; 255
 8a8:	01 80       	ldd	r0, Z+1	; 0x01
 8aa:	f2 81       	ldd	r31, Z+2	; 0x02
 8ac:	e0 2d       	mov	r30, r0
 8ae:	86 81       	ldd	r24, Z+6	; 0x06
 8b0:	97 81       	ldd	r25, Z+7	; 0x07
 8b2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <pxCurrentTCB+0x1>
 8b6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <pxCurrentTCB>
 8ba:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <uxTopReadyPriority>
 8be:	08 95       	ret

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
