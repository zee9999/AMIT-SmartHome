
Interfacing_modules__AMIT_F20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000057a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001601  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fc  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b01  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000031f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b7  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e9  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  8a:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_WRITE_CMD>:
	}
}
void LCD_WRITE_CHR(uint32_t numbr)
{
	//uint8_t num[10];
	LCD_WRITE_DTA(numbr);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	9c 2f       	mov	r25, r28
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_WRITE_CMD+0x3c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_WRITE_CMD+0x42>
  d4:	00 00       	nop
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	c2 9f       	mul	r28, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	9b b3       	in	r25, 0x1b	; 27
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_WRITE_CMD+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_WRITE_CMD+0x72>
 104:	00 00       	nop
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_WRITE_CMD+0x82>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_WRITE_CMD+0x88>
 11a:	00 00       	nop
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <LCD_Init>:
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	65 e0       	ldi	r22, 0x05	; 5
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	66 e0       	ldi	r22, 0x06	; 6
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	67 e0       	ldi	r22, 0x07	; 7
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	83 ed       	ldi	r24, 0xD3	; 211
 16a:	90 e3       	ldi	r25, 0x30	; 48
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <LCD_Init+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_Init+0x56>
 176:	00 00       	nop
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 17e:	83 e3       	ldi	r24, 0x33	; 51
 180:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 18a:	88 e2       	ldi	r24, 0x28	; 40
 18c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 1a2:	08 95       	ret

000001a4 <LCD_WRITE_DTA>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	9c 2f       	mov	r25, r28
 1ca:	90 7f       	andi	r25, 0xF0	; 240
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	89 2b       	or	r24, r25
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_WRITE_DTA+0x3c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_WRITE_DTA+0x42>
 1e6:	00 00       	nop
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 1f2:	20 e1       	ldi	r18, 0x10	; 16
 1f4:	c2 9f       	mul	r28, r18
 1f6:	c0 01       	movw	r24, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	9f 70       	andi	r25, 0x0F	; 15
 1fe:	89 2b       	or	r24, r25
 200:	8b bb       	out	0x1b, r24	; 27
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 20c:	8f e9       	ldi	r24, 0x9F	; 159
 20e:	9f e0       	ldi	r25, 0x0F	; 15
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_WRITE_DTA+0x6c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_WRITE_DTA+0x72>
 216:	00 00       	nop
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	9f e1       	ldi	r25, 0x1F	; 31
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_WRITE_DTA+0x82>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_WRITE_DTA+0x88>
 22c:	00 00       	nop
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD_WRITE_STR>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ec 01       	movw	r28, r24
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_WRITE_STR+0xe>
 23a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_WRITE_DTA>
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	88 81       	ld	r24, Y
 242:	81 11       	cpse	r24, r1
 244:	fa cf       	rjmp	.-12     	; 0x23a <LCD_WRITE_STR+0x8>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <LCD_CLEAR>:
	//ltoa(numbr, (uint8_t*)num, 10);//Long to Ascii
	//LCD_WRITE_STR(num);
}
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_WRITE_CMD>
 252:	08 95       	ret

00000254 <DIO_SetPin_Direction>:

#include "DIO.h"

void DIO_SetPin_Direction(DIO_Port port, DIO_Pin pin, DIO_Direction direction)
{
	switch (direction)
 254:	44 23       	and	r20, r20
 256:	19 f0       	breq	.+6      	; 0x25e <DIO_SetPin_Direction+0xa>
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	c9 f1       	breq	.+114    	; 0x2ce <DIO_SetPin_Direction+0x7a>
 25c:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 f0       	breq	.+36     	; 0x286 <DIO_SetPin_Direction+0x32>
 262:	28 f0       	brcs	.+10     	; 0x26e <DIO_SetPin_Direction+0x1a>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	d9 f0       	breq	.+54     	; 0x29e <DIO_SetPin_Direction+0x4a>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	29 f1       	breq	.+74     	; 0x2b6 <DIO_SetPin_Direction+0x62>
 26c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 26e:	2a b3       	in	r18, 0x1a	; 26
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPin_Direction+0x26>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPin_Direction+0x22>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	8a bb       	out	0x1a, r24	; 26
			break;
 284:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 286:	27 b3       	in	r18, 0x17	; 23
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPin_Direction+0x3e>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPin_Direction+0x3a>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	87 bb       	out	0x17, r24	; 23
			break;
 29c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 29e:	24 b3       	in	r18, 0x14	; 20
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPin_Direction+0x56>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPin_Direction+0x52>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	84 bb       	out	0x14, r24	; 20
			break;
 2b4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 2b6:	21 b3       	in	r18, 0x11	; 17
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SetPin_Direction+0x6e>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SetPin_Direction+0x6a>
 2c6:	80 95       	com	r24
 2c8:	82 23       	and	r24, r18
 2ca:	81 bb       	out	0x11, r24	; 17
			break;
 2cc:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	89 f0       	breq	.+34     	; 0x2f4 <DIO_SetPin_Direction+0xa0>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <DIO_SetPin_Direction+0x8a>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	c9 f0       	breq	.+50     	; 0x30a <DIO_SetPin_Direction+0xb6>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	11 f1       	breq	.+68     	; 0x320 <DIO_SetPin_Direction+0xcc>
 2dc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 2de:	2a b3       	in	r18, 0x1a	; 26
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_SetPin_Direction+0x96>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_SetPin_Direction+0x92>
 2ee:	82 2b       	or	r24, r18
 2f0:	8a bb       	out	0x1a, r24	; 26
			break;
 2f2:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 2f4:	27 b3       	in	r18, 0x17	; 23
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_SetPin_Direction+0xac>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_SetPin_Direction+0xa8>
 304:	82 2b       	or	r24, r18
 306:	87 bb       	out	0x17, r24	; 23
			break;
 308:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 30a:	24 b3       	in	r18, 0x14	; 20
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_SetPin_Direction+0xc2>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_SetPin_Direction+0xbe>
 31a:	82 2b       	or	r24, r18
 31c:	84 bb       	out	0x14, r24	; 20
			break;
 31e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 320:	21 b3       	in	r18, 0x11	; 17
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_SetPin_Direction+0xd8>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_SetPin_Direction+0xd4>
 330:	82 2b       	or	r24, r18
 332:	81 bb       	out	0x11, r24	; 17
 334:	08 95       	ret

00000336 <DIO_SetPin_State>:
		break;
	}
}
void DIO_SetPin_State(DIO_Port port, DIO_Pin pin, DIO_State state)
{
	switch (state)
 336:	44 23       	and	r20, r20
 338:	19 f0       	breq	.+6      	; 0x340 <DIO_SetPin_State+0xa>
 33a:	41 30       	cpi	r20, 0x01	; 1
 33c:	c9 f1       	breq	.+114    	; 0x3b0 <DIO_SetPin_State+0x7a>
 33e:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	91 f0       	breq	.+36     	; 0x368 <DIO_SetPin_State+0x32>
 344:	28 f0       	brcs	.+10     	; 0x350 <DIO_SetPin_State+0x1a>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	d9 f0       	breq	.+54     	; 0x380 <DIO_SetPin_State+0x4a>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	29 f1       	breq	.+74     	; 0x398 <DIO_SetPin_State+0x62>
 34e:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 350:	2b b3       	in	r18, 0x1b	; 27
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPin_State+0x26>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPin_State+0x22>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	8b bb       	out	0x1b, r24	; 27
			break;
 366:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 368:	28 b3       	in	r18, 0x18	; 24
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_SetPin_State+0x3e>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_SetPin_State+0x3a>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	88 bb       	out	0x18, r24	; 24
			break;
 37e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 380:	25 b3       	in	r18, 0x15	; 21
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_SetPin_State+0x56>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_SetPin_State+0x52>
 390:	80 95       	com	r24
 392:	82 23       	and	r24, r18
 394:	85 bb       	out	0x15, r24	; 21
			break;
 396:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 398:	22 b3       	in	r18, 0x12	; 18
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPin_State+0x6e>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPin_State+0x6a>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	82 bb       	out	0x12, r24	; 18
			break;
 3ae:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	89 f0       	breq	.+34     	; 0x3d6 <DIO_SetPin_State+0xa0>
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <DIO_SetPin_State+0x8a>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	c9 f0       	breq	.+50     	; 0x3ec <DIO_SetPin_State+0xb6>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	11 f1       	breq	.+68     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3be:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 3c0:	2b b3       	in	r18, 0x1b	; 27
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPin_State+0x96>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPin_State+0x92>
 3d0:	82 2b       	or	r24, r18
 3d2:	8b bb       	out	0x1b, r24	; 27
			break;
 3d4:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 3d6:	28 b3       	in	r18, 0x18	; 24
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPin_State+0xac>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPin_State+0xa8>
 3e6:	82 2b       	or	r24, r18
 3e8:	88 bb       	out	0x18, r24	; 24
			break;
 3ea:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 3ec:	25 b3       	in	r18, 0x15	; 21
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPin_State+0xc2>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPin_State+0xbe>
 3fc:	82 2b       	or	r24, r18
 3fe:	85 bb       	out	0x15, r24	; 21
			break;
 400:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 402:	22 b3       	in	r18, 0x12	; 18
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	82 2b       	or	r24, r18
 414:	82 bb       	out	0x12, r24	; 18
 416:	08 95       	ret

00000418 <main>:
#include "SPI.h"
#include "LCD.h"

int main(void)
{
	LCD_Init();
 418:	0e 94 90 00 	call	0x120	; 0x120 <LCD_Init>
	LCD_CLEAR();
 41c:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
	Slave_Init();
 420:	0e 94 a8 02 	call	0x550	; 0x550 <Slave_Init>
	LED0_Initialize();
 424:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LED0_Initialize>
	LED1_Initialize();
 428:	0e 94 84 02 	call	0x508	; 0x508 <LED1_Initialize>
	LED2_Initialize();
 42c:	0e 94 96 02 	call	0x52c	; 0x52c <LED2_Initialize>
	uint8_t data;
	
	
	while(1)
	{
		data = Slave_Recv();
 430:	0e 94 b7 02 	call	0x56e	; 0x56e <Slave_Recv>
 434:	c8 2f       	mov	r28, r24
		LCD_CLEAR();
 436:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LED1_OFF();
			LED2_OFF();
			LCD_CLEAR();
			LCD_WRITE_STR("ALL LEDs: OFF");
		}*/
		switch (data)
 43a:	c2 30       	cpi	r28, 0x02	; 2
 43c:	c1 f0       	breq	.+48     	; 0x46e <main+0x56>
 43e:	28 f4       	brcc	.+10     	; 0x44a <main+0x32>
 440:	cc 23       	and	r28, r28
 442:	e1 f1       	breq	.+120    	; 0x4bc <main+0xa4>
 444:	c1 30       	cpi	r28, 0x01	; 1
 446:	31 f0       	breq	.+12     	; 0x454 <main+0x3c>
 448:	46 c0       	rjmp	.+140    	; 0x4d6 <main+0xbe>
 44a:	c3 30       	cpi	r28, 0x03	; 3
 44c:	e9 f0       	breq	.+58     	; 0x488 <main+0x70>
 44e:	c4 30       	cpi	r28, 0x04	; 4
 450:	41 f1       	breq	.+80     	; 0x4a2 <main+0x8a>
 452:	41 c0       	rjmp	.+130    	; 0x4d6 <main+0xbe>
		{
		case 1:
			LED0_ON();
 454:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LED0_ON>
			LED1_OFF();
 458:	0e 94 90 02 	call	0x520	; 0x520 <LED1_OFF>
			LED2_OFF();
 45c:	0e 94 a2 02 	call	0x544	; 0x544 <LED2_OFF>
			LCD_CLEAR();
 460:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("LED0: ON");
 464:	80 e6       	ldi	r24, 0x60	; 96
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 46c:	e1 cf       	rjmp	.-62     	; 0x430 <main+0x18>
		case 2:
			LED0_OFF();
 46e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LED0_OFF>
			LED1_ON();
 472:	0e 94 8a 02 	call	0x514	; 0x514 <LED1_ON>
			LED2_OFF();
 476:	0e 94 a2 02 	call	0x544	; 0x544 <LED2_OFF>
			LCD_CLEAR();
 47a:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("LED1: ON");
 47e:	89 e6       	ldi	r24, 0x69	; 105
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 486:	d4 cf       	rjmp	.-88     	; 0x430 <main+0x18>
		case 3:
			LED0_OFF();
 488:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LED0_OFF>
			LED1_OFF();
 48c:	0e 94 90 02 	call	0x520	; 0x520 <LED1_OFF>
			LED2_ON();
 490:	0e 94 9c 02 	call	0x538	; 0x538 <LED2_ON>
			LCD_CLEAR();
 494:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("LED2: ON");
 498:	82 e7       	ldi	r24, 0x72	; 114
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 4a0:	c7 cf       	rjmp	.-114    	; 0x430 <main+0x18>
		case 4:
			LED0_ON();
 4a2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LED0_ON>
			LED1_ON();
 4a6:	0e 94 8a 02 	call	0x514	; 0x514 <LED1_ON>
			LED2_ON();
 4aa:	0e 94 9c 02 	call	0x538	; 0x538 <LED2_ON>
			LCD_CLEAR();
 4ae:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("ALL LEDs: ON");
 4b2:	8b e7       	ldi	r24, 0x7B	; 123
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 4ba:	ba cf       	rjmp	.-140    	; 0x430 <main+0x18>
		case 0:
			LED0_OFF();
 4bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LED0_OFF>
			LED1_OFF();
 4c0:	0e 94 90 02 	call	0x520	; 0x520 <LED1_OFF>
			LED2_OFF();
 4c4:	0e 94 a2 02 	call	0x544	; 0x544 <LED2_OFF>
			LCD_CLEAR();
 4c8:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("ALL LEDs: OFF");
 4cc:	88 e8       	ldi	r24, 0x88	; 136
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 4d4:	ad cf       	rjmp	.-166    	; 0x430 <main+0x18>
		default:
			LCD_CLEAR();
 4d6:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_CLEAR>
			LCD_WRITE_STR("WRONG INPUT");
 4da:	86 e9       	ldi	r24, 0x96	; 150
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 19 01 	call	0x232	; 0x232 <LCD_WRITE_STR>
			break;
 4e2:	a6 cf       	rjmp	.-180    	; 0x430 <main+0x18>

000004e4 <LED0_Initialize>:
{
	DIO_SetPin_State(LED1_PRT, LED1, LED_LOW);
}
void LED1_Toggle(void)
{
	DIO_TglPin_State(LED1_PRT, LED1);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 4ee:	08 95       	ret

000004f0 <LED0_ON>:
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	62 e0       	ldi	r22, 0x02	; 2
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 4fa:	08 95       	ret

000004fc <LED0_OFF>:
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 506:	08 95       	ret

00000508 <LED1_Initialize>:
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	67 e0       	ldi	r22, 0x07	; 7
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 512:	08 95       	ret

00000514 <LED1_ON>:
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 51e:	08 95       	ret

00000520 <LED1_OFF>:
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	67 e0       	ldi	r22, 0x07	; 7
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 52a:	08 95       	ret

0000052c <LED2_Initialize>:
}


void LED2_Initialize(void)
{
	DIO_SetPin_Direction(LED2_DDR, LED2, LED_OUTPUT);
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	63 e0       	ldi	r22, 0x03	; 3
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_SetPin_Direction>
 536:	08 95       	ret

00000538 <LED2_ON>:
}
void LED2_ON(void)
{
	DIO_SetPin_State(LED2_PRT, LED2, LED_HIGH);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	63 e0       	ldi	r22, 0x03	; 3
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 542:	08 95       	ret

00000544 <LED2_OFF>:
}
void LED2_OFF(void)
{
	DIO_SetPin_State(LED2_PRT, LED2, LED_LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPin_State>
 54e:	08 95       	ret

00000550 <Slave_Init>:
	SPDR = data;
	while (GET_BIT(SPSR,SPIF) != 1);
}
void Slave_Init(void)
{
	CLR_BIT(DDRB,4);
 550:	87 b3       	in	r24, 0x17	; 23
 552:	8f 7e       	andi	r24, 0xEF	; 239
 554:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB,5);
 556:	87 b3       	in	r24, 0x17	; 23
 558:	8f 7d       	andi	r24, 0xDF	; 223
 55a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,6);
 55c:	87 b3       	in	r24, 0x17	; 23
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(DDRB,7);
 562:	87 b3       	in	r24, 0x17	; 23
 564:	8f 77       	andi	r24, 0x7F	; 127
 566:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x43;
 568:	83 e4       	ldi	r24, 0x43	; 67
 56a:	8d b9       	out	0x0d, r24	; 13
 56c:	08 95       	ret

0000056e <Slave_Recv>:
	SET_BIT(SPCR,SPR0);
	*/
}
char Slave_Recv(void)
{
	while (GET_BIT(SPSR,SPIF) != 1);
 56e:	77 9b       	sbis	0x0e, 7	; 14
 570:	fe cf       	rjmp	.-4      	; 0x56e <Slave_Recv>
	return SPDR;
 572:	8f b1       	in	r24, 0x0f	; 15
}
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
